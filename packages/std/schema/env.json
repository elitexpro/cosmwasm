{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Env",
  "type": "object",
  "required": [
    "block",
    "contract",
    "message"
  ],
  "properties": {
    "block": {
      "$ref": "#/definitions/BlockInfo"
    },
    "contract": {
      "$ref": "#/definitions/ContractInfo"
    },
    "message": {
      "$ref": "#/definitions/MessageInfo"
    }
  },
  "definitions": {
    "BlockInfo": {
      "type": "object",
      "required": [
        "chain_id",
        "height",
        "time",
        "time_nanos"
      ],
      "properties": {
        "chain_id": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "time": {
          "description": "Absolute time of the block creation in seconds since the UNIX epoch (00:00:00 on 1970-01-01 UTC).\n\nThe source of this is the [BFT Time in Tendermint](https://docs.tendermint.com/master/spec/consensus/bft-time.html), converted from nanoseconds to second precision by truncating the fractioal part.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "time_nanos": {
          "description": "The fractional part of the block time in nanoseconds since `time` (0 to 999999999). Add this to `time` if you need a high precision block time.\n\n# Examples\n\nUsing chrono:\n\n``` # use cosmwasm_std::{BlockInfo, ContractInfo, Env, HumanAddr, MessageInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: 1_571_797_419, #         time_nanos: 879305533, #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     message: MessageInfo { #         sender: HumanAddr::from(\"alice\"), #         sent_funds: vec![], #     }, #     contract: ContractInfo { #         address: HumanAddr::from(\"contract\"), #     }, # }; # extern crate chrono; use chrono::NaiveDateTime; let dt = NaiveDateTime::from_timestamp(env.block.time as i64, env.block.time_nanos as u32); ```\n\nCreating a simple millisecond-precision timestamp (as used in JavaScript):\n\n``` # use cosmwasm_std::{BlockInfo, ContractInfo, Env, HumanAddr, MessageInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: 1_571_797_419, #         time_nanos: 879305533, #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     message: MessageInfo { #         sender: HumanAddr::from(\"alice\"), #         sent_funds: vec![], #     }, #     contract: ContractInfo { #         address: HumanAddr::from(\"contract\"), #     }, # }; let millis = (env.block.time * 1_000) + (env.block.time_nanos / 1_000_000); ```",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ContractInfo": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/HumanAddr"
        }
      }
    },
    "HumanAddr": {
      "type": "string"
    },
    "MessageInfo": {
      "type": "object",
      "required": [
        "sender",
        "sent_funds"
      ],
      "properties": {
        "sender": {
          "description": "The `sender` field from the `wasm/MsgStoreCode`, `wasm/MsgInstantiateContract`, `wasm/MsgMigrateContract` or `wasm/MsgExecuteContract` message. You can think of this as the address that initiated the action (i.e. the message). What that means exactly heavily depends on the application.\n\nThe x/wasm module ensures that the sender address signed the transaction. Additional signers of the transaction that are either needed for other messages or contain unnecessary signatures are not propagated into the contract.\n\nThere is a discussion to open up this field to multiple initiators, which you're welcome to join if you have a specific need for that feature: https://github.com/CosmWasm/cosmwasm/issues/293",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "sent_funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      }
    },
    "Uint128": {
      "type": "string"
    }
  }
}
