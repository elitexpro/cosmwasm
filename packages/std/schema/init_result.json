{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InitResult",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "ok"
      ],
      "properties": {
        "ok": {
          "$ref": "#/definitions/InitResponse"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "err"
      ],
      "properties": {
        "err": {
          "$ref": "#/definitions/ApiError"
        }
      }
    }
  ],
  "definitions": {
    "ApiError": {
      "description": "ApiError is a \"converted\" Error that can be serialized and deserialized. It can be created via `error.into()` This will not contain all information of the original (source error and backtrace cannot be serialized), but we ensure the following: 1. An ApiError will have the same type as the original Error 2. An ApiError will have the same display as the original 3. Serializing and deserializing an ApiError will give you an identical struct\n\nRather than use Display to pass Errors over API/FFI boundaries, we can use ApiError and provide much more context to the client.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "Base64Err"
          ],
          "properties": {
            "Base64Err": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "ContractErr"
          ],
          "properties": {
            "ContractErr": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "DynContractErr"
          ],
          "properties": {
            "DynContractErr": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "NotFound"
          ],
          "properties": {
            "NotFound": {
              "type": "object",
              "required": [
                "kind"
              ],
              "properties": {
                "kind": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "NullPointer"
          ],
          "properties": {
            "NullPointer": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "ParseErr"
          ],
          "properties": {
            "ParseErr": {
              "type": "object",
              "required": [
                "kind",
                "source"
              ],
              "properties": {
                "kind": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "SerializeErr"
          ],
          "properties": {
            "SerializeErr": {
              "type": "object",
              "required": [
                "kind",
                "source"
              ],
              "properties": {
                "kind": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "Unauthorized"
          ],
          "properties": {
            "Unauthorized": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "Underflow"
          ],
          "properties": {
            "Underflow": {
              "type": "object",
              "required": [
                "minuend",
                "subtrahend"
              ],
              "properties": {
                "minuend": {
                  "type": "string"
                },
                "subtrahend": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "Utf8Err"
          ],
          "properties": {
            "Utf8Err": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "Utf8StringErr"
          ],
          "properties": {
            "Utf8StringErr": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "ValidationErr"
          ],
          "properties": {
            "ValidationErr": {
              "type": "object",
              "required": [
                "field",
                "msg"
              ],
              "properties": {
                "field": {
                  "type": "string"
                },
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    },
    "BankMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "send"
          ],
          "properties": {
            "send": {
              "type": "object",
              "required": [
                "amount",
                "from_address",
                "to_address"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "from_address": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "to_address": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CosmosMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankMsg"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "$ref": "#/definitions/NativeMsg"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmMsg"
            }
          }
        }
      ]
    },
    "HumanAddr": {
      "type": "string"
    },
    "InitResponse": {
      "type": "object",
      "required": [
        "log",
        "messages"
      ],
      "properties": {
        "data": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "log": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAttribute"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CosmosMsg"
          }
        }
      }
    },
    "LogAttribute": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "NativeMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "raw"
          ],
          "properties": {
            "raw": {
              "$ref": "#/definitions/Binary"
            }
          }
        }
      ]
    },
    "Uint128": {
      "type": "string"
    },
    "WasmMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "msg": {
                  "$ref": "#/definitions/Binary"
                },
                "send": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "instantiate"
          ],
          "properties": {
            "instantiate": {
              "type": "object",
              "required": [
                "code_id",
                "msg"
              ],
              "properties": {
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "msg": {
                  "$ref": "#/definitions/Binary"
                },
                "send": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          }
        }
      ]
    }
  }
}
