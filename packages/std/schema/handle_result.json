{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "HandleResult",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "Ok"
      ],
      "properties": {
        "Ok": {
          "$ref": "#/definitions/HandleResponse_for_Never"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "Err"
      ],
      "properties": {
        "Err": {
          "$ref": "#/definitions/ApiError"
        }
      }
    }
  ],
  "definitions": {
    "ApiError": {
      "description": "ApiError is a \"converted\" Error that can be serialized and deserialized. It can be created via `error.into()` This will not contain all information of the original (source error and backtrace cannot be serialized), but we ensure the following: 1. An ApiError will have the same type as the original Error 2. An ApiError will have the same display as the original 3. Serializing and deserializing an ApiError will give you an identical struct\n\nRather than use Display to pass Errors over API/FFI boundaries, we can use ApiError and provide much more context to the client.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "contract_err"
          ],
          "properties": {
            "contract_err": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "dyn_contract_err"
          ],
          "properties": {
            "dyn_contract_err": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "invalid_base64"
          ],
          "properties": {
            "invalid_base64": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "not_found"
          ],
          "properties": {
            "not_found": {
              "type": "object",
              "required": [
                "kind"
              ],
              "properties": {
                "kind": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "null_pointer"
          ],
          "properties": {
            "null_pointer": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "parse_err"
          ],
          "properties": {
            "parse_err": {
              "type": "object",
              "required": [
                "kind",
                "source"
              ],
              "properties": {
                "kind": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "serialize_err"
          ],
          "properties": {
            "serialize_err": {
              "type": "object",
              "required": [
                "kind",
                "source"
              ],
              "properties": {
                "kind": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "unauthorized"
          ],
          "properties": {
            "unauthorized": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "underflow"
          ],
          "properties": {
            "underflow": {
              "type": "object",
              "required": [
                "minuend",
                "subtrahend"
              ],
              "properties": {
                "minuend": {
                  "type": "string"
                },
                "subtrahend": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "utf8_string_err"
          ],
          "properties": {
            "utf8_string_err": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "validation_err"
          ],
          "properties": {
            "validation_err": {
              "type": "object",
              "required": [
                "field",
                "msg"
              ],
              "properties": {
                "field": {
                  "type": "string"
                },
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    },
    "BankMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "send"
          ],
          "properties": {
            "send": {
              "type": "object",
              "required": [
                "amount",
                "from_address",
                "to_address"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "from_address": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "to_address": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CosmosMsg_for_Never": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankMsg"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/Never"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "$ref": "#/definitions/StakingMsg"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmMsg"
            }
          }
        }
      ]
    },
    "HandleResponse_for_Never": {
      "type": "object",
      "required": [
        "log",
        "messages"
      ],
      "properties": {
        "data": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "log": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAttribute"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CosmosMsg_for_Never"
          }
        }
      }
    },
    "HumanAddr": {
      "type": "string"
    },
    "LogAttribute": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Never": {
      "description": "Never can never be instantiated and is a no-op placeholder for unsupported enums, such as contracts that don't set a custom message.",
      "enum": []
    },
    "StakingMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "delegate"
          ],
          "properties": {
            "delegate": {
              "type": "object",
              "required": [
                "amount",
                "validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "validator": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "undelegate"
          ],
          "properties": {
            "undelegate": {
              "type": "object",
              "required": [
                "amount",
                "validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "validator": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "withdraw"
          ],
          "properties": {
            "withdraw": {
              "type": "object",
              "required": [
                "validator"
              ],
              "properties": {
                "recipient": {
                  "description": "this is the \"withdraw address\", the one that should receive the rewards if None, then use delegator address",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/HumanAddr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "validator": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "redelegate"
          ],
          "properties": {
            "redelegate": {
              "type": "object",
              "required": [
                "amount",
                "dst_validator",
                "src_validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "dst_validator": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "src_validator": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        }
      ]
    },
    "Uint128": {
      "type": "string"
    },
    "WasmMsg": {
      "anyOf": [
        {
          "description": "this dispatches a call to another contract at a known address (with known ABI)",
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "msg": {
                  "description": "msg is the json-encoded HandleMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "send": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          }
        },
        {
          "description": "this instantiates a new contracts from previously uploaded wasm code",
          "type": "object",
          "required": [
            "instantiate"
          ],
          "properties": {
            "instantiate": {
              "type": "object",
              "required": [
                "code_id",
                "msg"
              ],
              "properties": {
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "msg": {
                  "description": "msg is the json-encoded InitMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "send": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          }
        }
      ]
    }
  }
}
