{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryResult",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "Ok"
      ],
      "properties": {
        "Ok": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "Err"
      ],
      "properties": {
        "Err": {
          "$ref": "#/definitions/ApiError"
        }
      }
    }
  ],
  "definitions": {
    "ApiError": {
      "description": "ApiError is a \"converted\" Error that can be serialized and deserialized. It can be created via `error.into()` This will not contain all information of the original (source error and backtrace cannot be serialized), but we ensure the following: 1. An ApiError will have the same type as the original Error 2. An ApiError will have the same display as the original 3. Serializing and deserializing an ApiError will give you an identical struct\n\nRather than use Display to pass Errors over API/FFI boundaries, we can use ApiError and provide much more context to the client.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "contract_err"
          ],
          "properties": {
            "contract_err": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "dyn_contract_err"
          ],
          "properties": {
            "dyn_contract_err": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "invalid_base64"
          ],
          "properties": {
            "invalid_base64": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "invalid_utf8"
          ],
          "properties": {
            "invalid_utf8": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "not_found"
          ],
          "properties": {
            "not_found": {
              "type": "object",
              "required": [
                "kind"
              ],
              "properties": {
                "kind": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "null_pointer"
          ],
          "properties": {
            "null_pointer": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "parse_err"
          ],
          "properties": {
            "parse_err": {
              "type": "object",
              "required": [
                "msg",
                "target"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                },
                "target": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "serialize_err"
          ],
          "properties": {
            "serialize_err": {
              "type": "object",
              "required": [
                "msg",
                "source"
              ],
              "properties": {
                "msg": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "unauthorized"
          ],
          "properties": {
            "unauthorized": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "underflow"
          ],
          "properties": {
            "underflow": {
              "type": "object",
              "required": [
                "minuend",
                "subtrahend"
              ],
              "properties": {
                "minuend": {
                  "type": "string"
                },
                "subtrahend": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "validation_err"
          ],
          "properties": {
            "validation_err": {
              "type": "object",
              "required": [
                "field",
                "msg"
              ],
              "properties": {
                "field": {
                  "type": "string"
                },
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    }
  }
}
