{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ListAccountsResponse",
  "type": "object",
  "required": [
    "accounts"
  ],
  "properties": {
    "accounts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AccountInfo"
      }
    }
  },
  "definitions": {
    "AccountInfo": {
      "type": "object",
      "required": [
        "channel_id",
        "last_update_time",
        "remote_balance"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "last_update_time": {
          "description": "last block balance was updated (0 is never)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "remote_addr": {
          "description": "in normal cases, it should be set, but there is a delay between binding the channel and making a query and in that time it is empty",
          "type": [
            "string",
            "null"
          ]
        },
        "remote_balance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      }
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
