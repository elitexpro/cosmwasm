{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "owner"
      ],
      "properties": {
        "owner": {
          "type": "object"
        }
      }
    },
    {
      "description": "This will call out to SpecialQuery::Capitalized",
      "type": "object",
      "required": [
        "capitalized"
      ],
      "properties": {
        "capitalized": {
          "type": "object",
          "required": [
            "text"
          ],
          "properties": {
            "text": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "description": "Queries the blockchain and returns the result untouched",
      "type": "object",
      "required": [
        "chain"
      ],
      "properties": {
        "chain": {
          "type": "object",
          "required": [
            "request"
          ],
          "properties": {
            "request": {
              "$ref": "#/definitions/QueryRequest_for_SpecialQuery"
            }
          }
        }
      }
    },
    {
      "description": "Queries another contract and returns the data",
      "type": "object",
      "required": [
        "raw"
      ],
      "properties": {
        "raw": {
          "type": "object",
          "required": [
            "contract",
            "key"
          ],
          "properties": {
            "contract": {
              "$ref": "#/definitions/HumanAddr"
            },
            "key": {
              "$ref": "#/definitions/Binary"
            }
          }
        }
      }
    },
    {
      "description": "If there was a previous ReflectSubCall with this ID, returns cosmwasm_std::SubcallResult",
      "type": "object",
      "required": [
        "sub_call_result"
      ],
      "properties": {
        "sub_call_result": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "BankQuery": {
      "anyOf": [
        {
          "description": "This calls into the native bank module for one denomination Return value is BalanceResponse",
          "type": "object",
          "required": [
            "balance"
          ],
          "properties": {
            "balance": {
              "type": "object",
              "required": [
                "address",
                "denom"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "denom": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "description": "This calls into the native bank module for all denominations. Note that this may be much more expensive than Balance and should be avoided if possible. Return value is AllBalanceResponse.",
          "type": "object",
          "required": [
            "all_balances"
          ],
          "properties": {
            "all_balances": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "HumanAddr": {
      "type": "string"
    },
    "IbcQuery": {
      "description": "These are queries to the various IBC modules to see the state of the contract's IBC connection. These will return errors if the contract is not \"ibc enabled\"",
      "anyOf": [
        {
          "description": "Gets the Port ID the current contract is bound to. Returns PortIdResponse",
          "type": "object",
          "required": [
            "port_id"
          ],
          "properties": {
            "port_id": {
              "type": "object"
            }
          }
        },
        {
          "description": "Lists all (portID, channelID) pairs that are bound to a given port If port_id is omitted, list all channels bound to the contract's port. Returns ListChannelsResponse.",
          "type": "object",
          "required": [
            "list_channels"
          ],
          "properties": {
            "list_channels": {
              "type": "object",
              "properties": {
                "port_id": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          }
        },
        {
          "description": "Lists all information for a (portID, channelID) pair. If port_id is omitted, it will default to the contract's own channel. (To save a PortId{} call) Returns ChannelResponse.",
          "type": "object",
          "required": [
            "channel"
          ],
          "properties": {
            "channel": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "type": "string"
                },
                "port_id": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "QueryRequest_for_SpecialQuery": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankQuery"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/SpecialQuery"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "$ref": "#/definitions/StakingQuery"
            }
          }
        },
        {
          "description": "A Stargate query encoded the same way as abci_query, with path and protobuf encoded Data. The format is defined in [ADR-21](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-021-protobuf-query-encoding.md) The response is also protobuf encoded. The caller is responsible for compiling the proper protobuf definitions",
          "type": "object",
          "required": [
            "stargate"
          ],
          "properties": {
            "stargate": {
              "type": "object",
              "required": [
                "data",
                "path"
              ],
              "properties": {
                "data": {
                  "description": "this is the expected protobuf message type (not any), binary encoded",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "path": {
                  "description": "this is the fully qualified service path used for routing, eg. custom/cosmos_sdk.x.bank.v1.Query/QueryBalance",
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "ibc"
          ],
          "properties": {
            "ibc": {
              "$ref": "#/definitions/IbcQuery"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmQuery"
            }
          }
        }
      ]
    },
    "SpecialQuery": {
      "description": "An implementation of QueryRequest::Custom to show this works and can be extended in the contract",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "ping"
          ],
          "properties": {
            "ping": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "capitalized"
          ],
          "properties": {
            "capitalized": {
              "type": "object",
              "required": [
                "text"
              ],
              "properties": {
                "text": {
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    },
    "StakingQuery": {
      "anyOf": [
        {
          "description": "Returns the denomination that can be bonded (if there are multiple native tokens on the chain)",
          "type": "object",
          "required": [
            "bonded_denom"
          ],
          "properties": {
            "bonded_denom": {
              "type": "object"
            }
          }
        },
        {
          "description": "AllDelegations will return all delegations by the delegator",
          "type": "object",
          "required": [
            "all_delegations"
          ],
          "properties": {
            "all_delegations": {
              "type": "object",
              "required": [
                "delegator"
              ],
              "properties": {
                "delegator": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        },
        {
          "description": "Delegation will return more detailed info on a particular delegation, defined by delegator/validator pair",
          "type": "object",
          "required": [
            "delegation"
          ],
          "properties": {
            "delegation": {
              "type": "object",
              "required": [
                "delegator",
                "validator"
              ],
              "properties": {
                "delegator": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "validator": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        },
        {
          "description": "Returns all registered Validators on the system",
          "type": "object",
          "required": [
            "validators"
          ],
          "properties": {
            "validators": {
              "type": "object"
            }
          }
        }
      ]
    },
    "WasmQuery": {
      "anyOf": [
        {
          "description": "this queries the public API of another contract at a known address (with known ABI) return value is whatever the contract returns (caller should know)",
          "type": "object",
          "required": [
            "smart"
          ],
          "properties": {
            "smart": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "msg": {
                  "description": "msg is the json-encoded QueryMsg struct",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "description": "this queries the raw kv-store of the contract. returns the raw, unparsed data stored at that key, which may be an empty vector if not present",
          "type": "object",
          "required": [
            "raw"
          ],
          "properties": {
            "raw": {
              "type": "object",
              "required": [
                "contract_addr",
                "key"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "key": {
                  "description": "Key is the raw key used in the contracts Storage",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          }
        }
      ]
    }
  }
}
