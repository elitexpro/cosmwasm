{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InvestmentInfo",
  "description": "Investment info is fixed at initialization, and is used to control the function of the contract",
  "type": "object",
  "required": [
    "bond_denom",
    "exit_tax",
    "min_withdrawl",
    "owner",
    "validator"
  ],
  "properties": {
    "bond_denom": {
      "description": "this is the denomination we can stake (and only one we accept for payments)",
      "type": "string"
    },
    "exit_tax": {
      "description": "this is how much the owner takes as a cut when someone unbonds",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal9"
        }
      ]
    },
    "min_withdrawl": {
      "description": "This is the minimum amount we will pull out to reinvest, as well as a minumum that can be unbonded (to avoid needless staking tx)",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "owner": {
      "description": "owner created the contract and takes a cut",
      "allOf": [
        {
          "$ref": "#/definitions/CanonicalAddr"
        }
      ]
    },
    "validator": {
      "description": "All tokens are bonded to this validator FIXME: humanize/canonicalize address doesn't work for validator addrresses",
      "allOf": [
        {
          "$ref": "#/definitions/HumanAddr"
        }
      ]
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CanonicalAddr": {
      "$ref": "#/definitions/Binary"
    },
    "Decimal9": {
      "description": "Decimal9 represents a fixed-point decimal value with 9 fractional digits. That is Decimal9(1_000_000_000) == 1",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "HumanAddr": {
      "type": "string"
    },
    "Uint128": {
      "type": "string"
    }
  }
}
